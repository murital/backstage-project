apiVersion: backstage.io/v1beta2
kind: Template
# some metadata about the template itself
metadata:
  name: awslambda
  title: aws lambda
  description: lambda
  tags:
    - aws-lambda
    - serverless
spec:
  owner: Murital
  type: serverless
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
#           ui:autofocus: true
#           ui:options:
#             rows: 5
    
        Description:
          title: Description
          type: string
    - title: handler
      properties:
        name:
          title: handler
          type: string
    - title: runtime
      properties:
        name:
          title: runtime
          type: string
    - title: memory_size
      properties:
        name:
          title: memory_size
          type: number
    - title: concurrency
      properties:
        name:
          title: concurrency
          type: number
    - title: lambda_timeout
      properties:
        name:
          title: Decription
          type: number
    - title: log_retention
      properties:
        repoUrl:
          title: log_retention
          type: number
    - title: role_arn
      properties:
        repoUrl:
          title: role_arn
          type: string
    - title: subnet_ids
      properties:
        repoUrl:
          title: Decription
          type: string
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
          allowedHosts:
            - github.com      
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./lambda-skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.name }}
          handler: '{{ parameters.handler }}'
          runtime: '{{ parameters.runtime }}'
          memory_size: '{{ parameters.memory_size }}'
          concurrency: '{{ parameters.concurrency }}'
          lambda_timeout: '{{ parameters.lambda_timeout }}'
          log_retention: '{{ parameters.log_retention }}'
          role_arn: '{{ parameters.role_arn }}'
          subnet_ids: '{{ parameters.subnet_ids }}'
          
    - id: app-template
      name: Fetch Application Skeleton + Template
      action: fetch:template
      input:
        url: './react-skeleton'
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: '{{ parameters.name }}'
          description: '{{ parameters.description }}'
          destination: '{{ parseRepoUrl parameters.repoUrl }}'
          owner: '{{ parameters.owner }}'
          hostname: '{{#if parameters.hostname}}{{parameters.hostname}}{{else}}{{parameters.name}}.softrams.cloud{{/if}}'

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
